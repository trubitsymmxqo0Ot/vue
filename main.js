const App = {
	data() {
		return{
			title: "Список заметок",
			inputText: 'Введите название заметки',    
			inputValue: '',
			nodes: [],
		}
	},
	methods: {
		inputChangeHandler(event) {
			this.inputValue = event.target.value;
		},
		handleAddNodes() {
			this.nodes.push(this.inputValue);
			this.inputValue = '';
		},
		deleteNode(idx) {
			this.nodes.splice(idx, 1);
		},
		toUpperCaseMethod(item) {
			return item.toUpperCase();
		}
	},
	computed: {
		doubleNodes() { 
			return this.nodes.length * 2;
		}
	}
}

Vue.createApp(App).mount('#root') 

/*
	Представим такую ситуацию, мы взяли и с помощью интерполяции по коду где-то ниже отрисовали nodes.length, общее количество 
	to do листов, которые были созданы. Затем, мы создали новый метод doubleLength, в котором мы возращаем удовенное кличество 
	nodes.length:
	
	doubleMethod() {
		return this.methods.length * 2
	}

	Вроде бы все впорядке, метод doubleMethod перерисовывается только при нажатии на кнопку удалить, т.к. количество to do изменилось,
	либо при создании. Однако, если попробовать вывести в консоль какое-то сообщение при срабатывании метода doubleMethod, то мы увидим,
	что перерисовка метода происходит на каждый ввод символа в input, что вызывает проблемы производительности.

	Чтобы такого избежать, существует новый метод, который нужно засунуть внутрь App, оно называется computed, это также объект, 
	внутри которого мы создаем методы. Очень важно, что внутри computed все методы должны что-то возращать.

	Также, они должны зависеть от каких-то переменны, которые у нас есть внутри App, именно поэтому метод называется computed, он служит 
	для того, чтобы вычислять переменные, которые можно получить через this.

	Также, очень важно знать, что computed свойства вызывать внутри html не нужно, как мы делали это с другими методами, computed 
	являются get и set. То есть, она воспринимается как обычная переменная и является getters

	Чтобы легко понять computed, стоит запомнить одно простое правило: если мы производим какие-то вычисления, которые напрямую завязаны
	с переменными внутри App, то тогда такой метод (который и будет производить вычисления), стоит вынести в computed, в таком случае,
	лишних перерисовок не будет, т.к. наш метод будет следить исключительно за переменной, которую мы указали внутри метода this.
	Чтобы лучше понять, смотрим код
*/