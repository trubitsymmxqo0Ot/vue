const App = {
	data() {
		return{
			title: "Список заметок",
			placeholder: 'Введите название заметки',    
			inputValue: '',
			nodes: [],
		}
	},
	methods: {
		inputChangeHandler(event) {
			this.inputValue = event.target.value;
		},
		handleAddNodes() {
			this.nodes.push(this.inputValue);
			this.inputValue = '';
		}
	}
}

Vue.createApp(App).mount('#root') 

/*
	Очень важно, что все, что относится ко vue и находится внутри html, это директивы.

	И так, начнем с того, как именно работают циклы внутри vue. Чтобы запустить цикл внутри vue для какого-то из html тегов, нам нужно найти
	тот тег, который необходимо повторять (очень важно, не с оберткой, типо <ul якобы нам нужен этот тег><li></li></ul>), а именно
	элемент, который нужно будет повторять (условно <ul><li нам нужен этот тег></li></ul>), внутри него нам нужно обратиться к 
	массиву, который мы предварительно создали во vue и использовать конструкция типо someName in array или someName of array, где 
	someName - это произвольно названная нами переменная для использования её внутри html тегов. Также, у someName есть область видимости.
	Если мы её создали внутри li с помощью директивы v-for, то тогда эта переменная будет доступна ТОЛЬКО внутри этой конкретной li,
	за её пределами или внутри любого другого тега li доступа к переменной не будет

	Но что если мы хотим в наш input добавить модификатор? Допустим, чтобы при нажатии на Enter у нас обнулялся input и также 
	создавался новый to-do. На самом деле, это очень просто реализовать, есть два пути: через модификаторы и через методы. С модификаторами
	я сделал пример выше, но также распишу, как можно было бы сделать с помощью обычных методов, которые я уже применяю в коде.
	
	И так, для начала нам нужно использовать обычный v-on:keyporess и в него подключить новый метод с произвольным названием, который
	мы создали для обработки этого события. Далее мы просто проверяем, что event.key === "Enter" и просто через this мы вызываем 
	конкретный метод. Вот как будет в коде:

	HTML
	<input v-on:keypress="inputKeyPress"

	const App = {
		data(): {
			return {
				inputValue: '',
			}
		},
		methods: {
			inputChangeHandler(event) {
				this.inputValue = event.target.value;
			},
			handleAddNodes() {
				this.inputValue = '';
				this.nodes.push(this.inputValue);
			}
			inputKeyPress(event) {
				if(event.key === 'Enter'){
					this.handleAddNodes();
				}
			}
		}
	}
*/