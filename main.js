const App = {
	data() {
		return{
			title: "Список заметок",
			placeholder: 'Введите название заметки',    
			inputValue: '',
			nodes: [],
		}
	},
	methods: {
		inputChangeHandler(event) {
			this.inputValue = event.target.value;
		},
		handleAddNodes() {
			this.nodes.push(this.inputValue);
			this.inputValue = '';
		},
		deleteNode(idx) {
			this.nodes.splice(idx, 1);
		}
	}
}

Vue.createApp(App).mount('#root') 

/*
	Теперь поговори про тернарные условные операторы if, else, если мы задавали v-for для элементов списка, которые будут отображаться, то есть:
	<ul>
		<li></li> <- для вот этого
	</ui>

	То условные операторы нужно задавать для родительского списка:
	<ul> <- для вот этого
		<li></li>
	</ui>

	В случае, если условие не будет удовлетворять, то тогда блок кода в целом не появится в DOM дереве. Мы можем имитировать 
	if else с помощью нескольких v-if, однако, существует специальная конструкция v-else или v-else-if, смотря что нам нужно.

	Она будет работать так же, как и превычная нам конструкция, условно:
	<ul v-if="counter === 1">
		<li></li>
	</ui>
	<ul v-else-if="counter === 2">
		<li></li>
	</ui>
	<ul v-else="counter === 3">
		<li></li>
	</ui>

	Если не выполнится первое условие, то мы пойдем дальше. Первое же условие не появится в DOM дереве. Если же не выполнится никакое
	условие, то мы попадем в else, при этом все условия до else не будут отрендерены в DOM дереве.

	Главные условия выполнения такого кода: v-else-if обязательно должен идти после v-if, и также v-else-if обязательно должен содержать
	условие, в отличие от v-else, который условия не содержит. В целом, условия такие же, как и у обычных if else 

	
*/