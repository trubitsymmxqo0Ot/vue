const App = {
	data() {
		return{
			title: "Список заметок",
			placeholder: 'Введите название заметки',    
			inputValue: '',
		}
	},
	methods: {
		inputChangeHandler(event) {
			this.inputValue = event.target.value;
		}
	}
}

Vue.createApp(App).mount('#root') 

/*
	Важно, что все, что мы заносим внутрь data, а потом отдаем в html, называется моделью.
	Если мы хотим передать какой-то аргумент (в нашем случае placheolder), то обычная интерпаляция тут нам не поможет, мы не можем 
	просто передать текст таким образом: placeholder='{{placeholder}}'

	С помощью интетпаляции мы не можем взаимодействовать с атрибутами. Чтобы передавать какие-то динамические данные из vue в html, нам
	нужно забайндить атрибут, то есть, указать vue на контекст атрибута и сказать ему, что тут ожидается динамическая переменная.

	И так, мы дошли до двустороннего связывания. Дело в том, что нам нужно как-то получать данные, которые мы вписываем в input нашего html,
	какие-то супер ньюансы тут отсутствуют, просто нужно прочитать код далее, который написан выше и в html.

	А теперь поговорим подробно, что тут происходит. Сначала мы указываем некоторые атрибуты у input внутри html, а именно: 
	value для того, чтобы получать данные, которые вписал пользователь. Этот value мы байндим через v-bind, т.к. нам нужно 
	получить динамические данные из метода data и также мы задаем событие, это как бы событие onChange в стандартном браузере, но 
	со своим синтаксисом, а именно: v-on:input, напоминаю, v-on - с помощью этого мы объявляем событие, а после : мы говорим, какое
	именно событие мы объявили, в нашем случае, это input.
	Далее, уже в самом vue.js мы создали метод methods, он нужен для того, чтобы получать данные из html в js, именно так мы и реализовали
	двустороннее связывание. После чего, мы внутри этого метода создаем новый метод с произвольным названием, внутри которого уже
	вносит изменения. 

	Также, важная ремарка, когда мы пишем this, мы обращаемся ко всему глобальному объекту (в нашем случае это App), он игнорирует 
	обертки внутри себя (типа data, methods и т.д.), поэтому мы можем сразу напрямую обратиться к переменной, которая внутри себя
	будет содержать текст пользователя




*/