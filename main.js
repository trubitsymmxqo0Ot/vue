const App = {
	data: () => ({
		title: 'Что-то',
		myHtmlTag: '<div class="myHtmlTag">Это мой кастомный тег</div>',
		address: {
			city: "Moscow",
			country: "Russia",
		},
		items: [1,2,3,4,5,6],
	}),
	methods: {
		addItem() {
			this.items.unshift(this.$refs.myInput.value);
			this.$refs.myInput.value = '';
		}
	},
	computed: {
		evenItems() {
			return this.items.filter(i => i % 2 === 0)
		}
	}
}
Vue.createApp(App).mount('#root');

/*
	Есть очень много разных модификаторов, это и stop, и prevent, и capture и так далее, о каждом из них можно будет почитать в документации vue.
	Сейчас же мы поговорим об ссылках refs. Дело в том, что через refs в качестве альтернативы мы также можем сделать двусторонее связывание, например, для input.
	Конечно, этот refs может быть использован и в других местах кода, но пока что для примера будет использоваться input, другие вариации применения этого 
	метода будут дальше по уроку.

	и так, чтобы связать такие записи, нам нужно к нашему input применить ref="произвольное название", пускай название будет, например, myInput. Затем, когда мы в коде
	делаем какие-то изменения, чтобы вызвать конкретно эту переменную myInput, нам нужно написать вот так: this.$refs.myInput.value = ''. Первое - это контекст, второе -
	$refs, это системная переменная, все переменные, которые пишутся через $ являются таковыми и имеют какое-то прямое отношение ко vue, либо к браузеру. Второе -
	это сама наша переменная, которую мы указали в HTMl, а последнее - это value - значение input

	Также, стоит обратить внимание, что я обращаюсь в input к keyup.enter, но мы можем чейнить, соединять значения, чтобы пользователь делал какие-то комбинации клавиш,
	например: keyup.shift.enter
*/