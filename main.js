const App = {
	data() {
		return{
			counter: 72,
		}
	}
}

Vue.createApp(App).mount('#root') 

/*

	Стоит обратить внимание, что jsx мы не используем тут, хотя немного сходства есть.

	Также, очень важное замечание, что vue работает на virtualDOM, концепция которого
	мне уже знакома по react. 
	Во всем vue 3 в целом полностью был переписан код. Он теперь написан на основе
	ts, что делает типизацию vue намного проще.

	В целом, сам vue похож на react, но одновременно и не похож, у него внутри 
	уже готовые решения, на основе которых мы пишем код. Однако, эти решения 
	покрывают 95% потребностей, чего хватает с головой. Vue очень легковесный и 
	быстрый, но его нельзя так тонко настроить на ту же оптимизацию, как, например,
	знакомый мне react. Vue стоит использовать на каких-то средних или маленьких
	проектах, которые нужно быстро и качественно написать

	С помощью createApp мы инициализируем наше приложение, наш шаблон, который
	будет как-то видоизменять приложение. Сам по себе createApp ожидает на вход
	объект, который мы и передаем, мы просто вынесли его в другую переменную 
	для удобстваю.

	С помощью записи mount мы указываем как бы главный узел, который будет соединять
	наше приложение и vue.

	Из-за отсутствия jsx мы не можем смешивать (возможно пока что) html и js 
	код, следовательно, нам каким-то образом нужно передавать данные из js в html
	и наоборот. Метод data() как раз служит для того, чтобы передать какой-то 
	код из js в html. В нашем случае, мы передаем переменную, внутри которой указана
	цифра. В самом же методе мы также возращаем объект. В нашем случае это count и
	его значение. Очень важно понимать, что тут также пара (ключ + значение). Автор
	указал на то, что в этом есть свои ньюансы, поэтому это правило нужно понимать
*/