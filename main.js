const App = {
	data() {
		return{
			title: "Список заметок",
			placeholder: 'Введите название заметки',    
			inputValue: '',
			nodes: [],
		}
	},
	methods: {
		inputChangeHandler(event) {
			this.inputValue = event.target.value;
		},
		handleAddNodes() {
			this.nodes.push(this.inputValue);
			this.inputValue = '';
		},
		deleteNode(idx) {
			this.nodes.splice(idx, 1);
		}
	}
}

Vue.createApp(App).mount('#root') 

/*
	И так. Теперь разберемся, как удалять что-либо из массивов. На самом деле, когда мы писали myNode in nodes, мы использовали не все 
	возможности данной записи. По сути, это как функция, в которой мы можем получить и индекс, запись станет такой: (myNodes, idx) in nodes,
	где idx - это произвольное название переменной, которая хранит в себе индекс.

	Сам индекс мы можем передать в метод, вспоминаем один из уроков, где я объяснял, что у vue есть своя область видимости. В нашем случае
	<ul class="counter__list">
      <li class="counter__list-item" v-for="(myNode, idx) in nodes">
        {{myNode}}
        <button class="counter__delete" v-on:click="deleteNode">
          Удалить
        </button>
      </li>
    </ul>

	Обласить видимости myNode будет только в рамках li. Стоит обратить внимание, что мы создали button внутри li, а значит, исходя 
	из того как работает область видимости, в button, внутрь метода deleteNode мы можем передать idx, т.к. область видимости это позволяет 
	сделать.

	Также, внутрь методов мы можем передавать и нативный event браузера, чтобы его передать, нужно написать вот так: deleteNode($event), 
	если бы нам нужно было бы ещё и idx передать, но мы могли бы это смесло сделать, порядок не важен. Однако, если мы передали 
	event внутри html, допустим первым параметром, а idx вторым, то тогда нам в js файле нужно будет получать эти пропсы в таком же порядке
	(event, idx), если мы передаем внутри html пропсы вот таким образом - idx, event, то во vue мы бы получали эти пропсы точно в том же
	порядке idx, event.
*/