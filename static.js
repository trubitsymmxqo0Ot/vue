/*
	Компоненты во vue в целом нужны точно для того же, для чего они используются в реакте. В первую очередь - 
	это переиспользуемый код и удобная декомпозиция. 

	Во vue, тем не менее, внутрянка компонента отличается от React, однако ничего сложного внутри компонента 
	совершенно нет:

	Внутрь тега script мы пишем какие-то методы, которые будут как-либо взаимодействовать с html кодом, например,
	methods, data(), template и т.д. Все те методы, которые уже были использованы ранее и имеются в других 
	коммитах. Также, внутрь скрипта мы прокидываем import других компонентов
	<script setup>
		...Какие-то vue (js) методы...
	</script>

	Внутрь тега template мы пишем какую-то html структуру.
	<template>
		...Какой-то html код...
	</template>

	Внутрь тега style мы можем записать какие-либо стили. Также, помимо этого, вместо scoped, если мы используем
	какие-либо припроцессоры, мы можем написать аргумент lang="и сюда пишем название препроцессора". Например -
	lang="scss"
	<style scoped>
		...Какие-то стили...
	</style>

	Ещё нужно понимать, что из всех этих тегов самым важным является только template, без него приложение упадет.
	В случае с тегом script, если он будет отсутствовать внутри файла, то в таком случае, он будет автоматически
	добавлен самим vue позже.

	Также, пока что не совсем понятно как работать с компонентами в рамках vue, в шаблоне от разработчиков был один
	код, который воссоздать самостоятельно у меня не вышло, но у автора немного другой код, который уже сработал.
	Поэтому, пока что, я опишу тот код, который работает.

	Чтобы нам создать компонент и далее использовать его где-либо, нам нужно, собственно создать сам файл и 
	описать код, по шаблону, который я описал выше. Далее, после этого, нам внутри main.js, внутри которого
	инициализируется приложение, нужно к createApp применить метод component, выглядит это так:
		const app = createApp(App);
		app.component('the-header', TheHeader);
		app.mount('#app')

	внутри метода component мы задаем имя компонента, которое будет использоваться, а вторым аргументом указываем
	сам компонент, который мы используем.

	После чего имя (the-header) мы можем использовать в качестве html тега и причем мы указали этот тег глобально,
	он будет виден в любом компоненте. Выглядит это так:
		<template>
  			<the-header></the-header>
		</template>

*/